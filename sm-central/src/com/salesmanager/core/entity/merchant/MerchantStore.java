/*
 * Licensed to csti consulting 
 * You may obtain a copy of the License at
 *
 * http://www.csticonsulting.com
 * Copyright (c) 2006-Aug 24, 2010 Consultation CS-TI inc. 
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.salesmanager.core.entity.merchant;

// Generated Feb 19, 2008 9:21:32 PM by Hibernate Tools 3.2.0.b9

import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.lang.StringUtils;

import com.salesmanager.core.constants.Constants;
import com.salesmanager.core.entity.common.I18NEntity;
import com.salesmanager.core.entity.reference.Country;
import com.salesmanager.core.entity.reference.Language;
import com.salesmanager.core.entity.reference.Zone;
import com.salesmanager.core.service.cache.RefCache;
import com.salesmanager.core.util.FileUtil;
import com.salesmanager.core.util.LanguageUtil;
import com.salesmanager.core.util.LocaleUtil;
import com.salesmanager.core.util.PropertiesUtil;

/**
 * MerchantStore generated by hbm2java
 */
public class MerchantStore implements java.io.Serializable, I18NEntity {

	private int merchantId;

	private String storename;

	private int country;

	private String zone;

	private String storestateprovince;

	private String currency;

	private int bgcolorcode;

	private String storelogo;

	private String storeemailaddress;

	private String continueshoppingurl;

	private String storeaddress;

	private String storecity;

	private String storephone;

	private String storepostalcode;

	private String supportedlanguages;

	private String weightunitcode;

	private String seizeunitcode;

	private Date lastModified;

	private Date inBusinessSince;

	private String templateModule = "";

	private String storebanner;

	private Locale locale;

	private boolean useCache;

	private List languages;

	private String defaultLang;

	private String domainName;

	private static Configuration conf = PropertiesUtil.getConfiguration();

	private void initialize() {
		// this.setTemplateModule("");
	}

	public MerchantStore() {

		this.bgcolorcode = 0;
		this.continueshoppingurl = "";
		this.country = Constants.US_COUNTRY_ID;
		this.currency = Constants.CURRENCY_CODE_USD;
		this.lastModified = new Date();
		this.seizeunitcode = Constants.CM_SIZE_UNIT;
		this.weightunitcode = Constants.KG_WEIGHT_UNIT;
		this.storeaddress = "";
		this.storecity = "";
		this.storeemailaddress = "";
		this.storelogo = "";
		this.storename = "";
		this.storephone = "";
		this.storepostalcode = "";
		this.storestateprovince = "";
		this.supportedlanguages = Constants.ENGLISH_CODE;
		this.storebanner = "";
		initialize();

	}

	public MerchantStore(int merchantId, String storename, int country,
			String zone, String currency, int bgcolorcode,
			String weightunitcode, String seizeunitcode, String storephone,
			String templateModule) {
		this.merchantId = merchantId;
		this.storename = storename;
		this.country = country;
		this.zone = zone;
		this.currency = currency;
		this.bgcolorcode = bgcolorcode;
		this.weightunitcode = weightunitcode;
		this.seizeunitcode = seizeunitcode;
		this.storephone = storephone;
		this.templateModule = templateModule;
		initialize();
	}

	public MerchantStore(int merchantid, String storename, int country,
			String zone, String storestateprovince, String currency,
			int bgcolorcode, String storelogo, String storebanner,
			String storeemailaddress, String continueshoppingurl,
			String storeaddress, String storecity, String storepostalcode,
			String supportedlanguages, String weightunitcode,
			String seizeunitcode, Date lastModified, String storephone,
			String templateModule) {
		this.merchantId = merchantId;
		this.storename = storename;
		this.country = country;
		this.zone = zone;
		this.storestateprovince = storestateprovince;
		this.currency = currency;
		this.bgcolorcode = bgcolorcode;
		this.storelogo = storelogo;
		this.storeemailaddress = storeemailaddress;
		this.continueshoppingurl = continueshoppingurl;
		this.storeaddress = storeaddress;
		this.storecity = storecity;
		this.storebanner = storebanner;
		this.storepostalcode = storepostalcode;
		this.supportedlanguages = supportedlanguages;
		this.weightunitcode = weightunitcode;
		this.seizeunitcode = seizeunitcode;
		this.lastModified = lastModified;
		this.storephone = storephone;
		this.templateModule = templateModule;
		initialize();
	}

	public int getMerchantId() {
		return this.merchantId;
	}

	public void setMerchantId(int merchantId) {
		this.merchantId = merchantId;
	}

	public String getStorename() {
		return this.storename;
	}

	public void setStorename(String storename) {
		this.storename = storename;
	}

	public int getCountry() {
		return this.country;
	}

	public void setCountry(int country) {
		this.country = country;
	}

	public String getCountryName() {
		if (locale == null) {
			locale = LocaleUtil.getDefaultLocale();
		}

		Map cMap = RefCache.getAllcountriesmap(LanguageUtil
				.getLanguageNumberCode(locale.getLanguage()));
		Country c = (Country) cMap.get(this.getCountry());
		if (c != null) {
			return c.getCountryName();
		} else {
			return "";
		}
	}

	
	public String getZoneName() {
		if (locale == null) {
			locale = LocaleUtil.getDefaultLocale();
		}

		Map cMap = RefCache.getAllZonesmap(LanguageUtil
				.getLanguageNumberCode(locale.getLanguage()));
		
		
		int iz = 0;
		try {
			iz = Integer.parseInt(this.getZone());
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		Zone z = (Zone) cMap.get(iz);
		if (z != null) {
			return z.getZoneName();
		} else {
			if(!StringUtils.isBlank(this.getStorestateprovince())) {
				return this.getStorestateprovince();
			} else {
			
				return "";
				
			}
		}
	}
	
	public String getZone() {
		return this.zone;
	}

	public void setZone(String zone) {
		this.zone = zone;
	}

	public String getStorestateprovince() {
		return this.storestateprovince;
	}

	public void setStorestateprovince(String storestateprovince) {
		this.storestateprovince = storestateprovince;
	}

	public String getCurrency() {
		return this.currency;
	}

	public void setCurrency(String currency) {
		this.currency = currency;
	}

	public int getBgcolorcode() {
		return this.bgcolorcode;
	}

	public void setBgcolorcode(int bgcolorcode) {
		this.bgcolorcode = bgcolorcode;
	}

	public String getStorebanner() {
		return storebanner;
	}

	public void setStorebanner(String storebanner) {
		this.storebanner = storebanner;
	}

	public String getStorelogo() {
		return this.storelogo;
	}

	public void setStorelogo(String storelogo) {
		this.storelogo = storelogo;
	}

	public String getStoreemailaddress() {
		return this.storeemailaddress;
	}

	public void setStoreemailaddress(String storeemailaddress) {
		this.storeemailaddress = storeemailaddress;
	}

	public String getContinueshoppingurl() {
		return this.continueshoppingurl;
	}

	public void setContinueshoppingurl(String continueshoppingurl) {
		this.continueshoppingurl = continueshoppingurl;
	}

	public String getStoreaddress() {
		return this.storeaddress;
	}

	public void setStoreaddress(String storeaddress) {
		this.storeaddress = storeaddress;
	}

	public String getStorecity() {
		return this.storecity;
	}

	public void setStorecity(String storecity) {
		this.storecity = storecity;
	}

	public String getStorepostalcode() {
		return this.storepostalcode;
	}

	public void setStorepostalcode(String storepostalcode) {
		this.storepostalcode = storepostalcode;
	}

	public String getSupportedlanguages() {
		return this.supportedlanguages;
	}

	public void setSupportedlanguages(String supportedlanguages) {
		this.supportedlanguages = supportedlanguages;
	}

	public String getWeightunitcode() {
		return this.weightunitcode;
	}

	public void setWeightunitcode(String weightunitcode) {
		this.weightunitcode = weightunitcode;
	}

	public String getSeizeunitcode() {
		return this.seizeunitcode;
	}

	public void setSeizeunitcode(String seizeunitcode) {
		this.seizeunitcode = seizeunitcode;
	}

	public Date getLastModified() {
		return this.lastModified;
	}

	public void setLastModified(Date lastModified) {
		this.lastModified = lastModified;
	}

	public String getStorephone() {
		return storephone;
	}

	public void setStorephone(String storephone) {
		this.storephone = storephone;
	}

	public Map getGetSupportedLanguages() {
		String languages = getSupportedlanguages();
		Map returnmap = new TreeMap();
		if (StringUtils.isBlank(languages)) {
			String defaultlang = conf
					.getString("core.system.defaultlanguageid");
			int defaultid = 1;
			if (defaultlang != null)
				try {
					defaultid = Integer.parseInt(defaultlang);
				} catch (Exception ignore) {
				}
			Map langs = RefCache.getLanguageswithindex();
			Language l = (Language) langs.get(Integer.valueOf(defaultid));
			returnmap.put(Integer.valueOf(l.getLanguageId()), l);
			return returnmap;
		}
		StringTokenizer st = new StringTokenizer(languages, ";");
		Map langs = RefCache.getLanguageswithcode();
		Language l;
		for (; st != null && st.hasMoreTokens(); returnmap.put(Integer
				.valueOf(l.getLanguageId()), l)) {
			String lang = st.nextToken();
			l = (Language) langs.get(lang);
		}

		return returnmap;

	}

	public String getTemplateModule() {
		return templateModule;
	}

	public void setTemplateModule(String templateModule) {
		this.templateModule = templateModule;
	}

	public String getLogoPath() {
		return FileUtil.getStoreLogoPath(this.getMerchantId(), this
				.getStorelogo());
	}

	public String getStoreBannerPath() {
		return FileUtil.getStoreLogoPath(this.getMerchantId(), this
				.getStorebanner());
	}

	public String getDescription() {
		// TODO Auto-generated method stub
		return "";
	}

	public void setLocale(Locale locale) {
		this.locale = locale;
	}

	public void setLocale(Locale locale, String currency) {
		this.locale = locale;

	}

	public boolean isUseCache() {
		return useCache;
	}

	public void setUseCache(boolean useCache) {
		this.useCache = useCache;
	}

	public List getLanguages() {
		return languages;
	}

	public void setLanguages(List languages) {
		this.languages = languages;
	}

	public String getDefaultLang() {
		return defaultLang;
	}

	public void setDefaultLang(String defaultLang) {
		this.defaultLang = defaultLang;
	}

	public String getDomainName() {
		return domainName;
	}

	public void setDomainName(String domainName) {
		this.domainName = domainName;
	}

	public Date getInBusinessSince() {
		return inBusinessSince;
	}

	public void setInBusinessSince(Date inBusinessSince) {
		this.inBusinessSince = inBusinessSince;
	}

}
