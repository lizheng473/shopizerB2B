/*
 * Licensed to csti consulting 
 * You may obtain a copy of the License at
 *
 * http://www.csticonsulting.com
 * Copyright (c) 2006-Aug 24, 2010 Consultation CS-TI inc. 
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.salesmanager.core.entity.catalog;

// Generated Nov 5, 2008 10:22:34 PM by Hibernate Tools 3.2.0.beta8

import java.math.BigDecimal;
import java.util.Locale;
import java.util.Set;

import com.salesmanager.core.entity.common.I18NEntity;
import com.salesmanager.core.module.model.application.PriceModule;
import com.salesmanager.core.util.LabelUtil;
import com.salesmanager.core.util.LanguageUtil;
import com.salesmanager.core.util.LocaleUtil;
import com.salesmanager.core.util.SpringUtil;

/**
 * ProductsPrice generated by hbm2java
 */
public class ProductPrice implements java.io.Serializable, I18NEntity {

	// Fields

	private long productPriceId;

	private long productId;

	private int productPriceTypeId;

	private String productPriceModuleName;

	private BigDecimal productPriceAmount;

	private boolean defaultPrice;

	private ProductPriceSpecial special;

	private Set priceDescriptions;

	private Locale locale;
	private String currency;

	// Constructors

	public String getCurrency() {
		return currency;
	}

	public void setCurrency(String currency) {
		this.currency = currency;
	}

	/** default constructor */
	public ProductPrice() {
	}

	/** full constructor */
	public ProductPrice(long productPriceId, long productId,
			int productPriceTypeId, String productPriceModuleName,
			BigDecimal productPriceAmount, boolean defaultPrice) {
		this.productPriceId = productPriceId;
		this.productId = productId;
		this.productPriceTypeId = productPriceTypeId;
		this.productPriceModuleName = productPriceModuleName;
		this.productPriceAmount = productPriceAmount;
		this.defaultPrice = defaultPrice;
	}

	// Property accessors
	public long getProductPriceId() {
		return this.productPriceId;
	}

	public void setProductPriceId(long productPriceId) {
		this.productPriceId = productPriceId;
	}

	public long getProductId() {
		return this.productId;
	}

	public void setProductId(long productId) {
		this.productId = productId;
	}

	public int getProductPriceTypeId() {
		return this.productPriceTypeId;
	}

	public void setProductPriceTypeId(int productPriceTypeId) {
		this.productPriceTypeId = productPriceTypeId;
	}

	public String getProductPriceModuleName() {
		return this.productPriceModuleName;
	}

	public void setProductPriceModuleName(String productPriceModuleName) {
		this.productPriceModuleName = productPriceModuleName;
	}

	public BigDecimal getProductPriceAmount() {
		return this.productPriceAmount;
	}

	public void setProductPriceAmount(BigDecimal productPriceAmount) {
		this.productPriceAmount = productPriceAmount;
	}

	public boolean isDefaultPrice() {
		return defaultPrice;
	}

	public void setDefaultPrice(boolean defaultPrice) {
		this.defaultPrice = defaultPrice;
	}

	public ProductPriceSpecial getSpecial() {
		return special;
	}

	public void setSpecial(ProductPriceSpecial special) {
		this.special = special;
	}

	public String getPricePrefix() {
		try {
			PriceModule module = (PriceModule) SpringUtil.getBean(this
					.getProductPriceModuleName());
			return module.getPricePrefixText("", this.getLocale());
		} catch (Exception e) {
			return "";
		}
	}

	public String getPriceSuffix() {

		try {
			PriceModule module = (PriceModule) SpringUtil.getBean(this
					.getProductPriceModuleName());
			return module.getPriceSuffixText("", this.getLocale());
		} catch (Exception e) {
			return "";
		}

	}

	public String getFormatHTMLProductPrice() {
		try {

			PriceModule module = (PriceModule) SpringUtil.getBean(this
					.getProductPriceModuleName());
			return module.getHtmlPriceFormated(this.getDescription(), this,
					this.getLocale(), this.getCurrency());
		} catch (Exception e) {
			return "";
		}

	}

	public String getDescription() {
		try {

			ProductPriceDescription ppdescription = null;
			if (this.getLocale() == null) {
				this.setLocale(LocaleUtil.getDefaultLocale());
			}

			Locale loc = this.getLocale();
			if (this.getPriceDescriptions() != null
					&& this.getPriceDescriptions().size() > 0) {

				if (this.getPriceDescriptions().size() == 1) {
					ProductPriceDescription[] desc = (ProductPriceDescription[]) this
							.getPriceDescriptions().toArray(
									new ProductPriceDescription[this
											.getPriceDescriptions().size()]);
					ppdescription = desc[0];
				} else {
					int language = LanguageUtil.getLanguageNumberCode(locale
							.getLanguage());
					for (Object o : this.getPriceDescriptions()) {
						ProductPriceDescription ppd = (ProductPriceDescription) o;
						if (ppd.getId().getLanguageId() == language) {
							ppdescription = ppd;
							break;
						}
					}
				}
				return ppdescription.getProductPriceName();
			} else {
				LabelUtil l = LabelUtil.getInstance();
				return l.getText(locale, "module.description."
						+ this.getProductPriceModuleName());
			}

			// PriceModule module =
			// (PriceModule)SpringUtil.getBean(this.getProductPriceModuleName());
			// return module.getPriceText(this.getCurrency(), this.getLocale());
		} catch (Exception e) {
			return "";
		}
	}

	public Locale getLocale() {
		return locale;
	}

	public void setLocale(Locale locale) {
		this.locale = locale;
	}

	public void setLocale(Locale locale, String currency) {
		this.locale = locale;
		this.currency = currency;
	}

	public Set getPriceDescriptions() {
		return priceDescriptions;
	}

	public void setPriceDescriptions(Set priceDescriptions) {
		this.priceDescriptions = priceDescriptions;
	}

}
